# -*- coding: utf-8 -*-
"""lab3.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tQw-0czbaNnpx7_zkRYUD1WYqWu1AW6q
"""

!pip install opencv-python matplotlib

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Tải ảnh
!wget -O lena.jpg https://www.senviet.art/wp-content/uploads/2021/12/phenikaa1.jpg

# Đọc ảnh xám
img = cv2.imread('lena.jpg', cv2.IMREAD_GRAYSCALE)

# Hiển thị ảnh gốc
plt.figure(figsize=(5,5))
plt.imshow(img, cmap='gray')
plt.title('Original Image')
plt.axis('off')
plt.show()


# 1. Negative Transformation


# (1) Lập trình from scratch
def negative_transform(img):
    height, width = img.shape
    neg_img = np.zeros((height, width), dtype=np.uint8)

    for i in range(height):
        for j in range(width):
            neg_img[i, j] = 255 - img[i, j]
    return neg_img

neg_img_scratch = negative_transform(img)

# (2) Dùng hàm OpenCV
neg_img_cv = cv2.bitwise_not(img)

# Hiển thị kết quả
plt.figure(figsize=(12,5))
plt.subplot(1,3,1)
plt.imshow(img, cmap='gray')
plt.title('Original')
plt.axis('off')

plt.subplot(1,3,2)
plt.imshow(neg_img_scratch, cmap='gray')
plt.title('Negative (Scratch)')
plt.axis('off')

plt.subplot(1,3,3)
plt.imshow(neg_img_cv, cmap='gray')
plt.title('Negative (OpenCV)')
plt.axis('off')
plt.show()


# 2. Log Transformation


# (1) Lập trình from scratch
def log_transform(img):
    height, width = img.shape
    log_img = np.zeros((height, width), dtype=np.uint8)
    c = 255 / np.log(1 + np.max(img))

    for i in range(height):
        for j in range(width):
            log_img[i, j] = c * np.log(1 + img[i, j])
    return log_img

log_img_scratch = log_transform(img)

# (2) Dùng OpenCV (không có hàm riêng => phải tự code tương tự)
img_float = img.astype(np.float32)
log_img_cv = cv2.normalize(cv2.log(img_float + 1), None, 0, 255, cv2.NORM_MINMAX)
log_img_cv = np.array(log_img_cv, dtype=np.uint8)

# Hiển thị kết quả
plt.figure(figsize=(12,5))
plt.subplot(1,3,1)
plt.imshow(img, cmap='gray')
plt.title('Original')
plt.axis('off')

plt.subplot(1,3,2)
plt.imshow(log_img_scratch, cmap='gray')
plt.title('Log (Scratch)')
plt.axis('off')

plt.subplot(1,3,3)
plt.imshow(log_img_cv, cmap='gray')
plt.title('Log (OpenCV)')
plt.axis('off')
plt.show()


# 3. Gamma Transformation


# (1) Lập trình from scratch
def gamma_transform(img, gamma):
    height, width = img.shape
    gamma_img = np.zeros((height, width), dtype=np.uint8)
    c = 255 / (np.max(img) ** gamma)

    for i in range(height):
        for j in range(width):
            gamma_img[i, j] = c * (img[i, j] ** gamma)
    return gamma_img

gamma_value = 2.0
gamma_img_scratch = gamma_transform(img, gamma=gamma_value)

# (2) Dùng OpenCV (tự viết công thức tương tự)
gamma_img_cv = np.array(255 * (img / 255) ** gamma_value, dtype='uint8')

# Hiển thị kết quả
plt.figure(figsize=(12,5))
plt.subplot(1,3,1)
plt.imshow(img, cmap='gray')
plt.title('Original')
plt.axis('off')

plt.subplot(1,3,2)
plt.imshow(gamma_img_scratch, cmap='gray')
plt.title(f'Gamma {gamma_value} (Scratch)')
plt.axis('off')

plt.subplot(1,3,3)
plt.imshow(gamma_img_cv, cmap='gray')
plt.title(f'Gamma {gamma_value} (OpenCV)')
plt.axis('off')
plt.show()



!pip install opencv-python matplotlib

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Tải ảnh logo Phenikaa
!wget -O logo_phenikaa.png https://www.senviet.art/wp-content/uploads/2021/12/phenikaa1.jpg

# Đọc ảnh và chuyển sang ảnh xám
anh_goc = cv2.imread('logo_phenikaa.png', cv2.IMREAD_GRAYSCALE)

# Hàm hỗ trợ hiển thị nhiều ảnh
def hien_thi_nhieu_anh(ds_anh, ds_tieu_de, cmap='gray'):
    plt.figure(figsize=(15,5))
    for i in range(len(ds_anh)):
        plt.subplot(1, len(ds_anh), i+1)
        plt.imshow(ds_anh[i], cmap=cmap)
        plt.title(ds_tieu_de[i], fontsize=12)
        plt.axis('off')
    plt.show()

# Hiển thị ảnh gốc
hien_thi_nhieu_anh([anh_goc], ['Ảnh gốc'])

# 1. Biến đổi âm bản (Negative)


# (1) Tự lập trình (from scratch)
def bien_doi_am_ban(anh):
    return 255 - anh

anh_am_ban_tu_viet = bien_doi_am_ban(anh_goc)

# (2) Sử dụng hàm OpenCV
anh_am_ban_opencv = cv2.bitwise_not(anh_goc)

# Hiển thị kết quả
hien_thi_nhieu_anh([anh_goc, anh_am_ban_tu_viet, anh_am_ban_opencv],
                   ['Ảnh gốc', 'Âm bản (Tự viết)', 'Âm bản (OpenCV)'])


# 2. Biến đổi logarit
# -----------------------------

# (1) Tự lập trình (from scratch)
def bien_doi_log(anh):
    c = 255 / np.log(1 + np.max(anh))
    return np.array(c * np.log(1 + anh), dtype=np.uint8)

anh_log_tu_viet = bien_doi_log(anh_goc)

# (2) Dùng cách tương tự với OpenCV
anh_float = anh_goc.astype(np.float32)
anh_log_opencv = cv2.normalize(cv2.log(anh_float + 1), None, 0, 255, cv2.NORM_MINMAX)
anh_log_opencv = np.array(anh_log_opencv, dtype=np.uint8)

# Hiển thị kết quả
hien_thi_nhieu_anh([anh_goc, anh_log_tu_viet, anh_log_opencv],
                   ['Ảnh gốc', 'Logarit (Tự viết)', 'Logarit (OpenCV)'])


# 3. Biến đổi gamma


# (1) Tự lập trình (from scratch)
def bien_doi_gamma(anh, gamma):
    c = 255 / (np.max(anh) ** gamma)
    return np.array(c * (anh ** gamma), dtype=np.uint8)

gia_tri_gamma = 2.0
anh_gamma_tu_viet = bien_doi_gamma(anh_goc, gamma=gia_tri_gamma)

# (2) Dùng công thức tương tự với OpenCV
anh_gamma_opencv = np.array(255 * (anh_goc / 255) ** gia_tri_gamma, dtype=np.uint8)

# Hiển thị kết quả
hien_thi_nhieu_anh([anh_goc, anh_gamma_tu_viet, anh_gamma_opencv],
                   ['Ảnh gốc', f'Gamma {gia_tri_gamma} (Tự viết)', f'Gamma {gia_tri_gamma} (OpenCV)'])